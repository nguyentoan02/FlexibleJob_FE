name: üöÄ Build, Push and Deploy

on:
    push:
        branches:
            - Feat/testdeploy

env:
    SSH_USER: ec2-user
    APP_DIR: /home/ec2-user/app
    DOCKER_IMAGE_NAME: myapp-fe1

jobs:
    build-and-push:
        name: Build and Push to Docker Hub
        runs-on: ubuntu-latest
        outputs:
            image_tag: ${{ steps.docker_meta.outputs.version }}

        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v3

            - name: üîß Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: üîë Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: üìù Create .env from secret
              run: echo "${{ secrets.ENV_FILE }}" > .env

            - name: üè∑Ô∏è Extract Docker metadata
              id: docker_meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
                  tags: |
                      type=raw,value=latest,enable=true
                      type=raw,value=${{ github.run_number }},enable=true

            - name: ‚ö° Cache Docker layers
              uses: actions/cache@v4
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: üöÄ Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ steps.docker_meta.outputs.tags }}
                  labels: ${{ steps.docker_meta.outputs.labels }}
                  cache-from: type=local,src=/tmp/.buildx-cache
                  cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

            - name: Move cache
              run: |
                  rm -rf /tmp/.buildx-cache
                  mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    deploy:
        name: Rolling Deploy to EC2
        needs: build-and-push
        runs-on: ubuntu-latest

        steps:
            - name: üîê Setup key and Deploy
              run: |
                  echo "${{ secrets.EC2_KEY }}" > key.pem
                  chmod 400 key.pem

                  IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}
                  FULL_IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG"

                  HOSTS=(${{ secrets.EC2_HOSTS }})

                  for HOST in "${HOSTS[@]}"; do
                    echo "üëâ Deploying image $FULL_IMAGE_NAME to $HOST"

                    ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.SSH_USER }}@$HOST "
                      set -e
                      
                      echo 'üìÅ Creating app directory...'
                      mkdir -p ${{ env.APP_DIR }}

                      echo 'üîë Creating .env file...'
                      echo '${{ secrets.ENV_FILE }}' > ${{ env.APP_DIR }}/.env
                      
                      echo 'üê≥ Pulling latest image...'
                      docker pull $FULL_IMAGE_NAME
                      
                      echo 'üßπ Cleaning up old containers...'
                      docker stop ${{ env.DOCKER_IMAGE_NAME }}_new ${{ env.DOCKER_IMAGE_NAME }} 2>/dev/null || true
                      docker rm ${{ env.DOCKER_IMAGE_NAME }}_new ${{ env.DOCKER_IMAGE_NAME }} 2>/dev/null || true
                      
                      echo 'üöÄ Starting new container...'
                      docker run -d --name ${{ env.DOCKER_IMAGE_NAME }}_new -p 6000:80 --env-file ${{ env.APP_DIR }}/.env $FULL_IMAGE_NAME
                      
                      echo '‚åõ Waiting for new container to be healthy...'
                      sleep 10
                      
                      if [ \$(docker ps -q -f name=${{ env.DOCKER_IMAGE_NAME }}_new) ]; then
                        echo '‚úÖ New container is running successfully'
                        docker rename ${{ env.DOCKER_IMAGE_NAME }}_new ${{ env.DOCKER_IMAGE_NAME }}
                      else
                        echo '‚ùå New container failed to start'
                        docker logs ${{ env.DOCKER_IMAGE_NAME }}_new
                        exit 1
                      fi
                      
                      echo 'üóëÔ∏è Pruning old docker images...'
                      docker system prune -af
                      
                      echo '‚úÖ Done on $HOST'
                    " FULL_IMAGE_NAME="$FULL_IMAGE_NAME" HOST="$HOST"
                    
                    echo "üïí Waiting before next deploy..."
                    sleep 10
                  done
